#version: '3.8'

services:
  mariadb:
    container_name: mariadb			# Le nom du container, oui vraiment.
    networks: 
      - inception            			# à quel network il appartient
    build: 
      context: requirements/mariadb 	# ou se trouve son Dockerfile
      dockerfile: Dockerfile			# le nom du Dockerfile ?!
    env_file: .env                  # le fichier d'environnement pour transmettre les variables
    environment:
      - SQL_PASSWORD=$SQL_PASSWORD
      - SQL_DATABASE=$SQL_DATABASE
      - SQL_USER=$SQL_USER
      - SQL_ROOT_PASSWORD=$SQL_ROOT_PASSWORD
      - MDB_HOST=$MDB_HOST
    volumes:                        # Voir plus bas
      - mariadb:/var/lib/mysql
    expose:                         # le port à exposer
      - "3306"
    healthcheck:
      test: mysqladmin ping --host=localhost -p${SQL_ROOT_PASSWORD}
      interval: 5s
      timeout: 1s
      retries: 20
      start_period: 5s
    restart: unless-stopped
    #restart: always         # redémarre tant qu'il n'est pas stoppé 


  nginx:
    container_name: nginx
    volumes:
      - wordpress:/var/www/html/wordpress
    networks:
      - inception
    depends_on:        			 # Nouvelle ligne, indiquant de ne pas démarrer NGINX tant que WordPress n'a pas démarré.
      - wordpress
    build: 
      context: requirements/nginx
      dockerfile: Dockerfile
    env_file: .env
    ports:
      - "443:443" 		# on indique le port qui sera exposé a la machine locale
    restart: always 		# Ici nous changeons, le container redémarrera uniquement en cas de crash.

  wordpress:
    container_name: wordpress
    env_file: .env
    volumes:
      - wordpress:/var/www/html/wordpress
    networks:
      - inception
    build: 
      context: requirements/wordpress
      dockerfile: Dockerfile
    expose: 
      - "9000"
    depends_on: # WordPress démarrera uniquement après MariaDB (sinon il ne pourra pas configurer la base de données...)
      mariadb:
        condition: service_healthy
    restart: unless-stopped
    
    
volumes:
  wordpress:
    driver: local # ici nous stockons le volume en local
    driver_opts:
      type: 'none' 									# aucun type spécifique
      o: 'bind'
      device: '$HOME/data/wordpress' 		#Ou stocker le dossier sur votre ordinateur en local
  mariadb:
    driver: local
    driver_opts:
      type: 'none' 
      o: 'bind'										 # Les Bind Mounts sont des volumes qui se montent sur un chemin d'accès à l'hôte, et ils peuvent être modifiés par d'autres processus en dehors de docker.
      device: '$HOME/data/mariadb'			#Ou stocker le dossier sur votre ordinateur en local

networks:
  inception:
    driver: bridge